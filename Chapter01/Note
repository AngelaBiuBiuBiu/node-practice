Node官网定义：一个搭建在Chrome JavaScript运行时上的平台，用于构建高速、可伸缩的网络程序。
Node.js采用的是事件驱动、非阻塞I/O模型，使它既轻量又高效，并成为构建运行在分布式设备上的数据密集型实用程序的完美选择。

在服务器端编程，Node使用的是为google Chrome提供动力的V8虚拟机。
V8让Node在性能上得到了巨大的提升，因为它省去了中间环节，执行的不是字节码，用的也不是解释器，而是直接编译成了本地机器码。

开发人员用一种语言就能编写整个web应用，这可以减少开发客户端和服务端所需的语言切换。代码可以在客户端和服务端中共享。

Node为服务端JavaScript提供了一个事件驱动的、异步的平台。它把JavaScript带到服务端中的方式跟浏览器把JavaScript带到客户端的方式几乎一模一样。
了解浏览器的工作原理对我们了解Node的工作原理有很大帮助。它们都是事件驱动（用事件轮询）和非阻塞的I/O处理（用异步I/O）。


浏览器是单线程的，当浏览器中有I/O操作时，该操作会在事件轮询的外面执行（脚本执行的主顺序之外），然后当这个I/O操作完成时，它会发出一个“事件”，会有一个函数（“回调”）处理它。
这个I/O是异步的，并且不会“阻塞”脚本执行，事件轮询仍然可以响应页面上执行的其他交互或请求。这样，浏览器可以对客户作出响应，并且可以处理页面上的很多交互动作。


Node针对的应用程序有一个专门的简称：DIRT（data-intensive real-time），数据密集型实时程序。
因为Node自身在I/O上非常轻量，善于将数据从一个管道混排或代理到另一个管道上，这能在处理大量请求时持有很多开放的连接，并且只占用一小部分内存。
它的设计目标是保证响应能力，和浏览器一样。


Node是JavaScript程序的平台，不要把它跟框架相混淆。很多人都误把Node当作JavaScript上的Rails或Django，实际上它更底层。


Node在多个平台上均默认提供了DIRT方式，包括各种Windows和类unix系统。
底层的I/O库（libuv）特意屏蔽了宿主操作系统的差异性，提供了统一的使用方式，如果需要的话，程序可以在多个设备上轻松移植和运行。